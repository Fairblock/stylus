// Copyright 2021-2023, Offchain Labs, Inc.
// For license information, see https://github.com/nitro/blob/master/LICENSE

use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use wasmparser::Operator;

#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct OperatorCode(pub usize);

impl OperatorCode {
    // TODO: use std::mem::variant_count when it's stabilized
    pub const OPERATOR_COUNT: usize = 529;
}

impl Display for OperatorCode {
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        let name = match self.0 {
            0x00 => "Unreachable",
            0x01 => "Nop",
            0x02 => "Block",
            0x03 => "Loop",
            0x04 => "If",
            0x05 => "Else",
            0x06 => "Try",
            0x07 => "Catch",
            0x08 => "Throw",
            0x09 => "Rethrow",
            0x0b => "End",
            0x0c => "Br",
            0x0d => "BrIf",
            0x0e => "BrTable",
            0x0f => "Return",
            0x10 => "Call",
            0x11 => "CallIndirect",
            0x12 => "ReturnCall",
            0x13 => "ReturnCallIndirect",
            0x18 => "Delegate",
            0x19 => "CatchAll",
            0x1a => "Drop",
            0x1b => "Select",
            0x1c => "TypedSelect",
            0x20 => "LocalGet",
            0x21 => "LocalSet",
            0x22 => "LocalTee",
            0x23 => "GlobalGet",
            0x24 => "GlobalSet",
            0x25 => "TableGet",
            0x26 => "TableSet",
            0x28 => "I32Load",
            0x29 => "I64Load",
            0x2a => "F32Load",
            0x2b => "F64Load",
            0x2c => "I32Load8S",
            0x2d => "I32Load8U",
            0x2e => "I32Load16S",
            0x2f => "I32Load16U",
            0x30 => "I64Load8S",
            0x31 => "I64Load8U",
            0x32 => "I64Load16S",
            0x33 => "I64Load16U",
            0x34 => "I64Load32S",
            0x35 => "I64Load32U",
            0x36 => "I32Store",
            0x37 => "I64Store",
            0x38 => "F32Store",
            0x39 => "F64Store",
            0x3a => "I32Store8",
            0x3b => "I32Store16",
            0x3c => "I64Store8",
            0x3d => "I64Store16",
            0x3e => "I64Store32",
            0x3f => "MemorySize",
            0x40 => "MemoryGrow",
            0x41 => "I32Const",
            0x42 => "I64Const",
            0x43 => "F32Const",
            0x44 => "F64Const",
            0x45 => "I32Eqz",
            0x46 => "I32Eq",
            0x47 => "I32Ne",
            0x48 => "I32LtS",
            0x49 => "I32LtU",
            0x4a => "I32GtS",
            0x4b => "I32GtU",
            0x4c => "I32LeS",
            0x4d => "I32LeU",
            0x4e => "I32GeS",
            0x4f => "I32GeU",
            0x50 => "I64Eqz",
            0x51 => "I64Eq",
            0x52 => "I64Ne",
            0x53 => "I64LtS",
            0x54 => "I64LtU",
            0x55 => "I64GtS",
            0x56 => "I64GtU",
            0x57 => "I64LeS",
            0x58 => "I64LeU",
            0x59 => "I64GeS",
            0x5a => "I64GeU",
            0x5b => "F32Eq",
            0x5c => "F32Ne",
            0x5d => "F32Lt",
            0x5e => "F32Gt",
            0x5f => "F32Le",
            0x60 => "F32Ge",
            0x61 => "F64Eq",
            0x62 => "F64Ne",
            0x63 => "F64Lt",
            0x64 => "F64Gt",
            0x65 => "F64Le",
            0x66 => "F64Ge",
            0x67 => "I32Clz",
            0x68 => "I32Ctz",
            0x69 => "I32Popcnt",
            0x6a => "I32Add",
            0x6b => "I32Sub",
            0x6c => "I32Mul",
            0x6d => "I32DivS",
            0x6e => "I32DivU",
            0x6f => "I32RemS",
            0x70 => "I32RemU",
            0x71 => "I32And",
            0x72 => "I32Or",
            0x73 => "I32Xor",
            0x74 => "I32Shl",
            0x75 => "I32ShrS",
            0x76 => "I32ShrU",
            0x77 => "I32Rotl",
            0x78 => "I32Rotr",
            0x79 => "I64Clz",
            0x7a => "I64Ctz",
            0x7b => "I64Popcnt",
            0x7c => "I64Add",
            0x7d => "I64Sub",
            0x7e => "I64Mul",
            0x7f => "I64DivS",
            0x80 => "I64DivU",
            0x81 => "I64RemS",
            0x82 => "I64RemU",
            0x83 => "I64And",
            0x84 => "I64Or",
            0x85 => "I64Xor",
            0x86 => "I64Shl",
            0x87 => "I64ShrS",
            0x88 => "I64ShrU",
            0x89 => "I64Rotl",
            0x8a => "I64Rotr",
            0x8b => "F32Abs",
            0x8c => "F32Neg",
            0x8d => "F32Ceil",
            0x8e => "F32Floor",
            0x8f => "F32Trunc",
            0x90 => "F32Nearest",
            0x91 => "F32Sqrt",
            0x92 => "F32Add",
            0x93 => "F32Sub",
            0x94 => "F32Mul",
            0x95 => "F32Div",
            0x96 => "F32Min",
            0x97 => "F32Max",
            0x98 => "F32Copysign",
            0x99 => "F64Abs",
            0x9a => "F64Neg",
            0x9b => "F64Ceil",
            0x9c => "F64Floor",
            0x9d => "F64Trunc",
            0x9e => "F64Nearest",
            0x9f => "F64Sqrt",
            0xa0 => "F64Add",
            0xa1 => "F64Sub",
            0xa2 => "F64Mul",
            0xa3 => "F64Div",
            0xa4 => "F64Min",
            0xa5 => "F64Max",
            0xa6 => "F64Copysign",
            0xa7 => "I32WrapI64",
            0xa8 => "I32TruncF32S",
            0xa9 => "I32TruncF32U",
            0xaa => "I32TruncF64S",
            0xab => "I32TruncF64U",
            0xac => "I64ExtendI32S",
            0xad => "I64ExtendI32U",
            0xae => "I64TruncF32S",
            0xaf => "I64TruncF32U",
            0xb0 => "I64TruncF64S",
            0xb1 => "I64TruncF64U",
            0xb2 => "F32ConvertI32S",
            0xb3 => "F32ConvertI32U",
            0xb4 => "F32ConvertI64S",
            0xb5 => "F32ConvertI64U",
            0xb6 => "F32DemoteF64",
            0xb7 => "F64ConvertI32S",
            0xb8 => "F64ConvertI32U",
            0xb9 => "F64ConvertI64S",
            0xba => "F64ConvertI64U",
            0xbb => "F64PromoteF32",
            0xbc => "I32ReinterpretF32",
            0xbd => "I64ReinterpretF64",
            0xbe => "F32ReinterpretI32",
            0xbf => "F64ReinterpretI64",
            0xc0 => "I32Extend8S",
            0xc1 => "I32Extend16S",
            0xc2 => "I64Extend8S",
            0xc3 => "I64Extend16S",
            0xc4 => "I64Extend32S",
            0xd0 => "RefNull",
            0xd1 => "RefIsNull",
            0xd2 => "RefFunc",
            0xfc00 => "I32TruncSatF32S",
            0xfc01 => "I32TruncSatF32U",
            0xfc02 => "I32TruncSatF64S",
            0xfc03 => "I32TruncSatF64U",
            0xfc04 => "I64TruncSatF32S",
            0xfc05 => "I64TruncSatF32U",
            0xfc06 => "I64TruncSatF64S",
            0xfc07 => "I64TruncSatF64U",
            0xfc08 => "MemoryInit",
            0xfc09 => "DataDrop",
            0xfc0a => "MemoryCopy",
            0xfc0b => "MemoryFill",
            0xfc0c => "TableInit",
            0xfc0d => "ElemDrop",
            0xfc0e => "TableCopy",
            0xfc0f => "TableGrow",
            0xfc10 => "TableSize",
            0xfc11 => "TableFill",
            0xfd00 => "V128Load",
            0xfd01 => "V128Load8x8S",
            0xfd02 => "V128Load8x8U",
            0xfd03 => "V128Load16x4S",
            0xfd04 => "V128Load16x4U",
            0xfd05 => "V128Load32x2S",
            0xfd06 => "V128Load32x2U",
            0xfd07 => "V128Load8Splat",
            0xfd08 => "V128Load16Splat",
            0xfd09 => "V128Load32Splat",
            0xfd0a => "V128Load64Splat",
            0xfd0b => "V128Store",
            0xfd0c => "V128Const",
            0xfd0d => "I8x16Shuffle",
            0xfd0e => "I8x16Swizzle",
            0xfd0f => "I8x16Splat",
            0xfd10 => "I16x8Splat",
            0xfd11 => "I32x4Splat",
            0xfd12 => "I64x2Splat",
            0xfd13 => "F32x4Splat",
            0xfd14 => "F64x2Splat",
            0xfd15 => "I8x16ExtractLaneS",
            0xfd16 => "I8x16ExtractLaneU",
            0xfd17 => "I8x16ReplaceLane",
            0xfd18 => "I16x8ExtractLaneS",
            0xfd19 => "I16x8ExtractLaneU",
            0xfd1a => "I16x8ReplaceLane",
            0xfd1b => "I32x4ExtractLane",
            0xfd1c => "I32x4ReplaceLane",
            0xfd1d => "I64x2ExtractLane",
            0xfd1e => "I64x2ReplaceLane",
            0xfd1f => "F32x4ExtractLane",
            0xfd20 => "F32x4ReplaceLane",
            0xfd21 => "F64x2ExtractLane",
            0xfd22 => "F64x2ReplaceLane",
            0xfd23 => "I8x16Eq",
            0xfd24 => "I8x16Ne",
            0xfd25 => "I8x16LtS",
            0xfd26 => "I8x16LtU",
            0xfd27 => "I8x16GtS",
            0xfd28 => "I8x16GtU",
            0xfd29 => "I8x16LeS",
            0xfd2a => "I8x16LeU",
            0xfd2b => "I8x16GeS",
            0xfd2c => "I8x16GeU",
            0xfd2d => "I16x8Eq",
            0xfd2e => "I16x8Ne",
            0xfd2f => "I16x8LtS",
            0xfd30 => "I16x8LtU",
            0xfd31 => "I16x8GtS",
            0xfd32 => "I16x8GtU",
            0xfd33 => "I16x8LeS",
            0xfd34 => "I16x8LeU",
            0xfd35 => "I16x8GeS",
            0xfd36 => "I16x8GeU",
            0xfd37 => "I32x4Eq",
            0xfd38 => "I32x4Ne",
            0xfd39 => "I32x4LtS",
            0xfd3a => "I32x4LtU",
            0xfd3b => "I32x4GtS",
            0xfd3c => "I32x4GtU",
            0xfd3d => "I32x4LeS",
            0xfd3e => "I32x4LeU",
            0xfd3f => "I32x4GeS",
            0xfd40 => "I32x4GeU",
            0xfd41 => "F32x4Eq",
            0xfd42 => "F32x4Ne",
            0xfd43 => "F32x4Lt",
            0xfd44 => "F32x4Gt",
            0xfd45 => "F32x4Le",
            0xfd46 => "F32x4Ge",
            0xfd47 => "F64x2Eq",
            0xfd48 => "F64x2Ne",
            0xfd49 => "F64x2Lt",
            0xfd4a => "F64x2Gt",
            0xfd4b => "F64x2Le",
            0xfd4c => "F64x2Ge",
            0xfd4d => "V128Not",
            0xfd4e => "V128And",
            0xfd4f => "V128AndNot",
            0xfd50 => "V128Or",
            0xfd51 => "V128Xor",
            0xfd52 => "V128Bitselect",
            0xfd53 => "V128AnyTrue",
            0xfd54 => "V128Load8Lane",
            0xfd55 => "V128Load16Lane",
            0xfd56 => "V128Load32Lane",
            0xfd57 => "V128Load64Lane",
            0xfd58 => "V128Store8Lane",
            0xfd59 => "V128Store16Lane",
            0xfd5a => "V128Store32Lane",
            0xfd5b => "V128Store64Lane",
            0xfd5c => "V128Load32Zero",
            0xfd5d => "V128Load64Zero",
            0xfd5e => "F32x4DemoteF64x2Zero",
            0xfd5f => "F64x2PromoteLowF32x4",
            0xfd60 => "I8x16Abs",
            0xfd61 => "I8x16Neg",
            0xfd62 => "I8x16Popcnt",
            0xfd63 => "I8x16AllTrue",
            0xfd64 => "I8x16Bitmask",
            0xfd65 => "I8x16NarrowI16x8S",
            0xfd66 => "I8x16NarrowI16x8U",
            0xfd67 => "F32x4Ceil",
            0xfd68 => "F32x4Floor",
            0xfd69 => "F32x4Trunc",
            0xfd6a => "F32x4Nearest",
            0xfd6b => "I8x16Shl",
            0xfd6c => "I8x16ShrS",
            0xfd6d => "I8x16ShrU",
            0xfd6e => "I8x16Add",
            0xfd6f => "I8x16AddSatS",
            0xfd70 => "I8x16AddSatU",
            0xfd71 => "I8x16Sub",
            0xfd72 => "I8x16SubSatS",
            0xfd73 => "I8x16SubSatU",
            0xfd74 => "F64x2Ceil",
            0xfd75 => "F64x2Floor",
            0xfd76 => "I8x16MinS",
            0xfd77 => "I8x16MinU",
            0xfd78 => "I8x16MaxS",
            0xfd79 => "I8x16MaxU",
            0xfd7a => "F64x2Trunc",
            0xfd7b => "I8x16RoundingAverageU",
            0xfd7c => "I16x8ExtAddPairwiseI8x16S",
            0xfd7d => "I16x8ExtAddPairwiseI8x16U",
            0xfd7e => "I32x4ExtAddPairwiseI16x8S",
            0xfd7f => "I32x4ExtAddPairwiseI16x8U",
            0xfd80 => "I16x8Abs",
            0xfd81 => "I16x8Neg",
            0xfd82 => "I16x8Q15MulrSatS",
            0xfd83 => "I16x8AllTrue",
            0xfd84 => "I16x8Bitmask",
            0xfd85 => "I16x8NarrowI32x4S",
            0xfd86 => "I16x8NarrowI32x4U",
            0xfd87 => "I16x8ExtendLowI8x16S",
            0xfd88 => "I16x8ExtendHighI8x16S",
            0xfd89 => "I16x8ExtendLowI8x16U",
            0xfd8a => "I16x8ExtendHighI8x16U",
            0xfd8b => "I16x8Shl",
            0xfd8c => "I16x8ShrS",
            0xfd8d => "I16x8ShrU",
            0xfd8e => "I16x8Add",
            0xfd8f => "I16x8AddSatS",
            0xfd90 => "I16x8AddSatU",
            0xfd91 => "I16x8Sub",
            0xfd92 => "I16x8SubSatS",
            0xfd93 => "I16x8SubSatU",
            0xfd94 => "F64x2Nearest",
            0xfd95 => "I16x8Mul",
            0xfd96 => "I16x8MinS",
            0xfd97 => "I16x8MinU",
            0xfd98 => "I16x8MaxS",
            0xfd99 => "I16x8MaxU",
            0xfd9b => "I16x8RoundingAverageU",
            0xfd9c => "I16x8ExtMulLowI8x16S",
            0xfd9d => "I16x8ExtMulHighI8x16S",
            0xfd9e => "I16x8ExtMulLowI8x16U",
            0xfd9f => "I16x8ExtMulHighI8x16U",
            0xfda0 => "I32x4Abs",
            0xfda2 => "I8x16RelaxedSwizzle",
            0xfda1 => "I32x4Neg",
            0xfda3 => "I32x4AllTrue",
            0xfda4 => "I32x4Bitmask",
            0xfda5 => "I32x4RelaxedTruncSatF32x4S",
            0xfda6 => "I32x4RelaxedTruncSatF32x4U",
            0xfda7 => "I32x4ExtendLowI16x8S",
            0xfda8 => "I32x4ExtendHighI16x8S",
            0xfda9 => "I32x4ExtendLowI16x8U",
            0xfdaa => "I32x4ExtendHighI16x8U",
            0xfdab => "I32x4Shl",
            0xfdac => "I32x4ShrS",
            0xfdad => "I32x4ShrU",
            0xfdae => "I32x4Add",
            0xfdaf => "F32x4Fma",
            0xfdb0 => "F32x4Fms",
            0xfdb1 => "I32x4Sub",
            0xfdb2 => "I8x16LaneSelect",
            0xfdb3 => "I16x8LaneSelect",
            0xfdb4 => "F32x4RelaxedMin",
            0xfdb5 => "I32x4Mul",
            0xfdb6 => "I32x4MinS",
            0xfdb7 => "I32x4MinU",
            0xfdb8 => "I32x4MaxS",
            0xfdb9 => "I32x4MaxU",
            0xfdba => "I32x4DotI16x8S",
            0xfdbc => "I32x4ExtMulLowI16x8S",
            0xfdbd => "I32x4ExtMulHighI16x8S",
            0xfdbe => "I32x4ExtMulLowI16x8U",
            0xfdbf => "I32x4ExtMulHighI16x8U",
            0xfdc0 => "I64x2Abs",
            0xfdc1 => "I64x2Neg",
            0xfdc3 => "I64x2AllTrue",
            0xfdc4 => "I64x2Bitmask",
            0xfdc5 => "I32x4RelaxedTruncSatF64x2SZero",
            0xfdc6 => "I32x4RelaxedTruncSatF64x2UZero",
            0xfdc7 => "I64x2ExtendLowI32x4S",
            0xfdc8 => "I64x2ExtendHighI32x4S",
            0xfdc9 => "I64x2ExtendLowI32x4U",
            0xfdca => "I64x2ExtendHighI32x4U",
            0xfdcb => "I64x2Shl",
            0xfdcc => "I64x2ShrS",
            0xfdcd => "I64x2ShrU",
            0xfdce => "I64x2Add",
            0xfdcf => "F64x2Fma",
            0xfdd0 => "F64x2Fms",
            0xfdd1 => "I64x2Sub",
            0xfdd2 => "I32x4LaneSelect",
            0xfdd3 => "I64x2LaneSelect",
            0xfdd4 => "F64x2RelaxedMin",
            0xfdd5 => "I64x2Mul",
            0xfdd6 => "I64x2Eq",
            0xfdd7 => "I64x2Ne",
            0xfdd8 => "I64x2LtS",
            0xfdd9 => "I64x2GtS",
            0xfdda => "I64x2LeS",
            0xfddb => "I64x2GeS",
            0xfddc => "I64x2ExtMulLowI32x4S",
            0xfddd => "I64x2ExtMulHighI32x4S",
            0xfdde => "I64x2ExtMulLowI32x4U",
            0xfddf => "I64x2ExtMulHighI32x4U",
            0xfde0 => "F32x4Abs",
            0xfde1 => "F32x4Neg",
            0xfde2 => "F32x4RelaxedMax",
            0xfde3 => "F32x4Sqrt",
            0xfde4 => "F32x4Add",
            0xfde5 => "F32x4Sub",
            0xfde6 => "F32x4Mul",
            0xfde7 => "F32x4Div",
            0xfde8 => "F32x4Min",
            0xfde9 => "F32x4Max",
            0xfdea => "F32x4PMin",
            0xfdeb => "F32x4PMax",
            0xfdec => "F64x2Abs",
            0xfded => "F64x2Neg",
            0xfdee => "F64x2RelaxedMax",
            0xfdef => "F64x2Sqrt",
            0xfdf0 => "F64x2Add",
            0xfdf1 => "F64x2Sub",
            0xfdf2 => "F64x2Mul",
            0xfdf3 => "F64x2Div",
            0xfdf4 => "F64x2Min",
            0xfdf5 => "F64x2Max",
            0xfdf6 => "F64x2PMin",
            0xfdf7 => "F64x2PMax",
            0xfdf8 => "I32x4TruncSatF32x4S",
            0xfdf9 => "I32x4TruncSatF32x4U",
            0xfdfa => "F32x4ConvertI32x4S",
            0xfdfb => "F32x4ConvertI32x4U",
            0xfdfc => "I32x4TruncSatF64x2SZero",
            0xfdfd => "I32x4TruncSatF64x2UZero",
            0xfdfe => "F64x2ConvertLowI32x4S",
            0xfdff => "F64x2ConvertLowI32x4U",
            0xfe00 => "MemoryAtomicNotify",
            0xfe01 => "MemoryAtomicWait32",
            0xfe02 => "MemoryAtomicWait64",
            0xfe03 => "AtomicFence",
            0xfe10 => "I32AtomicLoad",
            0xfe11 => "I64AtomicLoad",
            0xfe12 => "I32AtomicLoad8U",
            0xfe13 => "I32AtomicLoad16U",
            0xfe14 => "I64AtomicLoad8U",
            0xfe15 => "I64AtomicLoad16U",
            0xfe16 => "I64AtomicLoad32U",
            0xfe17 => "I32AtomicStore",
            0xfe18 => "I64AtomicStore",
            0xfe19 => "I32AtomicStore8",
            0xfe1a => "I32AtomicStore16",
            0xfe1b => "I64AtomicStore8",
            0xfe1c => "I64AtomicStore16",
            0xfe1d => "I64AtomicStore32",
            0xfe1e => "I32AtomicRmwAdd",
            0xfe1f => "I64AtomicRmwAdd",
            0xfe20 => "I32AtomicRmw8AddU",
            0xfe21 => "I32AtomicRmw16AddU",
            0xfe22 => "I64AtomicRmw8AddU",
            0xfe23 => "I64AtomicRmw16AddU",
            0xfe24 => "I64AtomicRmw32AddU",
            0xfe25 => "I32AtomicRmwSub",
            0xfe26 => "I64AtomicRmwSub",
            0xfe27 => "I32AtomicRmw8SubU",
            0xfe28 => "I32AtomicRmw16SubU",
            0xfe29 => "I64AtomicRmw8SubU",
            0xfe2a => "I64AtomicRmw16SubU",
            0xfe2b => "I64AtomicRmw32SubU",
            0xfe2c => "I32AtomicRmwAnd",
            0xfe2d => "I64AtomicRmwAnd",
            0xfe2e => "I32AtomicRmw8AndU",
            0xfe2f => "I32AtomicRmw16AndU",
            0xfe30 => "I64AtomicRmw8AndU",
            0xfe31 => "I64AtomicRmw16AndU",
            0xfe32 => "I64AtomicRmw32AndU",
            0xfe33 => "I32AtomicRmwOr",
            0xfe34 => "I64AtomicRmwOr",
            0xfe35 => "I32AtomicRmw8OrU",
            0xfe36 => "I32AtomicRmw16OrU",
            0xfe37 => "I64AtomicRmw8OrU",
            0xfe38 => "I64AtomicRmw16OrU",
            0xfe39 => "I64AtomicRmw32OrU",
            0xfe3a => "I32AtomicRmwXor",
            0xfe3b => "I64AtomicRmwXor",
            0xfe3c => "I32AtomicRmw8XorU",
            0xfe3d => "I32AtomicRmw16XorU",
            0xfe3e => "I64AtomicRmw8XorU",
            0xfe3f => "I64AtomicRmw16XorU",
            0xfe40 => "I64AtomicRmw32XorU",
            0xfe41 => "I32AtomicRmwXchg",
            0xfe42 => "I64AtomicRmwXchg",
            0xfe43 => "I32AtomicRmw8XchgU",
            0xfe44 => "I32AtomicRmw16XchgU",
            0xfe45 => "I64AtomicRmw8XchgU",
            0xfe46 => "I64AtomicRmw16XchgU",
            0xfe47 => "I64AtomicRmw32XchgU",
            0xfe48 => "I32AtomicRmwCmpxchg",
            0xfe49 => "I64AtomicRmwCmpxchg",
            0xfe4a => "I32AtomicRmw8CmpxchgU",
            0xfe4b => "I32AtomicRmw16CmpxchgU",
            0xfe4c => "I64AtomicRmw8CmpxchgU",
            0xfe4d => "I64AtomicRmw16CmpxchgU",
            0xfe4e => "I64AtomicRmw32CmpxchgU",
            _ => "UNKNOWN",
        };
        write!(f, "{name}")
    }
}

impl<'a> From<Operator<'a>> for OperatorCode {
    fn from(op: Operator) -> Self {
        OperatorCode::from(&op)
    }
}

impl<'a> From<&Operator<'a>> for OperatorCode {
    fn from(op: &Operator) -> Self {
        use Operator::*;

        OperatorCode(match op {
            Unreachable => 0x00,
            Nop => 0x01,
            Block { .. } => 0x02,
            Loop { .. } => 0x03,
            If { .. } => 0x04,
            Else => 0x05,
            Try { .. } => 0x06,
            Catch { .. } => 0x07,
            Throw { .. } => 0x08,
            Rethrow { .. } => 0x09,
            End => 0x0b,
            Br { .. } => 0x0c,
            BrIf { .. } => 0x0d,
            BrTable { .. } => 0x0e,
            Return => 0x0f,
            Call { .. } => 0x10,
            CallIndirect { .. } => 0x11,
            ReturnCall { .. } => 0x12,
            ReturnCallIndirect { .. } => 0x13,
            Delegate { .. } => 0x18,
            CatchAll => 0x19,
            Drop => 0x1a,
            Select => 0x1b,
            TypedSelect { .. } => 0x1c,
            LocalGet { .. } => 0x20,
            LocalSet { .. } => 0x21,
            LocalTee { .. } => 0x22,
            GlobalGet { .. } => 0x23,
            GlobalSet { .. } => 0x24,
            TableGet { .. } => 0x25,
            TableSet { .. } => 0x26,
            I32Load { .. } => 0x28,
            I64Load { .. } => 0x29,
            F32Load { .. } => 0x2a,
            F64Load { .. } => 0x2b,
            I32Load8S { .. } => 0x2c,
            I32Load8U { .. } => 0x2d,
            I32Load16S { .. } => 0x2e,
            I32Load16U { .. } => 0x2f,
            I64Load8S { .. } => 0x30,
            I64Load8U { .. } => 0x31,
            I64Load16S { .. } => 0x32,
            I64Load16U { .. } => 0x33,
            I64Load32S { .. } => 0x34,
            I64Load32U { .. } => 0x35,
            I32Store { .. } => 0x36,
            I64Store { .. } => 0x37,
            F32Store { .. } => 0x38,
            F64Store { .. } => 0x39,
            I32Store8 { .. } => 0x3a,
            I32Store16 { .. } => 0x3b,
            I64Store8 { .. } => 0x3c,
            I64Store16 { .. } => 0x3d,
            I64Store32 { .. } => 0x3e,
            MemorySize { .. } => 0x3f,
            MemoryGrow { .. } => 0x40,
            I32Const { .. } => 0x41,
            I64Const { .. } => 0x42,
            F32Const { .. } => 0x43,
            F64Const { .. } => 0x44,
            I32Eqz => 0x45,
            I32Eq => 0x46,
            I32Ne => 0x47,
            I32LtS => 0x48,
            I32LtU => 0x49,
            I32GtS => 0x4a,
            I32GtU => 0x4b,
            I32LeS => 0x4c,
            I32LeU => 0x4d,
            I32GeS => 0x4e,
            I32GeU => 0x4f,
            I64Eqz => 0x50,
            I64Eq => 0x51,
            I64Ne => 0x52,
            I64LtS => 0x53,
            I64LtU => 0x54,
            I64GtS => 0x55,
            I64GtU => 0x56,
            I64LeS => 0x57,
            I64LeU => 0x58,
            I64GeS => 0x59,
            I64GeU => 0x5a,
            F32Eq => 0x5b,
            F32Ne => 0x5c,
            F32Lt => 0x5d,
            F32Gt => 0x5e,
            F32Le => 0x5f,
            F32Ge => 0x60,
            F64Eq => 0x61,
            F64Ne => 0x62,
            F64Lt => 0x63,
            F64Gt => 0x64,
            F64Le => 0x65,
            F64Ge => 0x66,
            I32Clz => 0x67,
            I32Ctz => 0x68,
            I32Popcnt => 0x69,
            I32Add => 0x6a,
            I32Sub => 0x6b,
            I32Mul => 0x6c,
            I32DivS => 0x6d,
            I32DivU => 0x6e,
            I32RemS => 0x6f,
            I32RemU => 0x70,
            I32And => 0x71,
            I32Or => 0x72,
            I32Xor => 0x73,
            I32Shl => 0x74,
            I32ShrS => 0x75,
            I32ShrU => 0x76,
            I32Rotl => 0x77,
            I32Rotr => 0x78,
            I64Clz => 0x79,
            I64Ctz => 0x7a,
            I64Popcnt => 0x7b,
            I64Add => 0x7c,
            I64Sub => 0x7d,
            I64Mul => 0x7e,
            I64DivS => 0x7f,
            I64DivU => 0x80,
            I64RemS => 0x81,
            I64RemU => 0x82,
            I64And => 0x83,
            I64Or => 0x84,
            I64Xor => 0x85,
            I64Shl => 0x86,
            I64ShrS => 0x87,
            I64ShrU => 0x88,
            I64Rotl => 0x89,
            I64Rotr => 0x8a,
            F32Abs => 0x8b,
            F32Neg => 0x8c,
            F32Ceil => 0x8d,
            F32Floor => 0x8e,
            F32Trunc => 0x8f,
            F32Nearest => 0x90,
            F32Sqrt => 0x91,
            F32Add => 0x92,
            F32Sub => 0x93,
            F32Mul => 0x94,
            F32Div => 0x95,
            F32Min => 0x96,
            F32Max => 0x97,
            F32Copysign => 0x98,
            F64Abs => 0x99,
            F64Neg => 0x9a,
            F64Ceil => 0x9b,
            F64Floor => 0x9c,
            F64Trunc => 0x9d,
            F64Nearest => 0x9e,
            F64Sqrt => 0x9f,
            F64Add => 0xa0,
            F64Sub => 0xa1,
            F64Mul => 0xa2,
            F64Div => 0xa3,
            F64Min => 0xa4,
            F64Max => 0xa5,
            F64Copysign => 0xa6,
            I32WrapI64 => 0xa7,
            I32TruncF32S => 0xa8,
            I32TruncF32U => 0xa9,
            I32TruncF64S => 0xaa,
            I32TruncF64U => 0xab,
            I64ExtendI32S => 0xac,
            I64ExtendI32U => 0xad,
            I64TruncF32S => 0xae,
            I64TruncF32U => 0xaf,
            I64TruncF64S => 0xb0,
            I64TruncF64U => 0xb1,
            F32ConvertI32S => 0xb2,
            F32ConvertI32U => 0xb3,
            F32ConvertI64S => 0xb4,
            F32ConvertI64U => 0xb5,
            F32DemoteF64 => 0xb6,
            F64ConvertI32S => 0xb7,
            F64ConvertI32U => 0xb8,
            F64ConvertI64S => 0xb9,
            F64ConvertI64U => 0xba,
            F64PromoteF32 => 0xbb,
            I32ReinterpretF32 => 0xbc,
            I64ReinterpretF64 => 0xbd,
            F32ReinterpretI32 => 0xbe,
            F64ReinterpretI64 => 0xbf,
            I32Extend8S => 0xc0,
            I32Extend16S => 0xc1,
            I64Extend8S => 0xc2,
            I64Extend16S => 0xc3,
            I64Extend32S => 0xc4,
            RefNull { .. } => 0xd0,
            RefIsNull => 0xd1,
            RefFunc { .. } => 0xd2,
            I32TruncSatF32S => 0xfc00,
            I32TruncSatF32U => 0xfc01,
            I32TruncSatF64S => 0xfc02,
            I32TruncSatF64U => 0xfc03,
            I64TruncSatF32S => 0xfc04,
            I64TruncSatF32U => 0xfc05,
            I64TruncSatF64S => 0xfc06,
            I64TruncSatF64U => 0xfc07,
            MemoryInit { .. } => 0xfc08,
            DataDrop { .. } => 0xfc09,
            MemoryCopy { .. } => 0xfc0a,
            MemoryFill { .. } => 0xfc0b,
            TableInit { .. } => 0xfc0c,
            ElemDrop { .. } => 0xfc0d,
            TableCopy { .. } => 0xfc0e,
            TableGrow { .. } => 0xfc0f,
            TableSize { .. } => 0xfc10,
            TableFill { .. } => 0xfc11,
            V128Load { .. } => 0xfd00,
            V128Load8x8S { .. } => 0xfd01,
            V128Load8x8U { .. } => 0xfd02,
            V128Load16x4S { .. } => 0xfd03,
            V128Load16x4U { .. } => 0xfd04,
            V128Load32x2S { .. } => 0xfd05,
            V128Load32x2U { .. } => 0xfd06,
            V128Load8Splat { .. } => 0xfd07,
            V128Load16Splat { .. } => 0xfd08,
            V128Load32Splat { .. } => 0xfd09,
            V128Load64Splat { .. } => 0xfd0a,
            V128Store { .. } => 0xfd0b,
            V128Const { .. } => 0xfd0c,
            I8x16Shuffle { .. } => 0xfd0d,
            I8x16Swizzle => 0xfd0e,
            I8x16Splat => 0xfd0f,
            I16x8Splat => 0xfd10,
            I32x4Splat => 0xfd11,
            I64x2Splat => 0xfd12,
            F32x4Splat => 0xfd13,
            F64x2Splat => 0xfd14,
            I8x16ExtractLaneS { .. } => 0xfd15,
            I8x16ExtractLaneU { .. } => 0xfd16,
            I8x16ReplaceLane { .. } => 0xfd17,
            I16x8ExtractLaneS { .. } => 0xfd18,
            I16x8ExtractLaneU { .. } => 0xfd19,
            I16x8ReplaceLane { .. } => 0xfd1a,
            I32x4ExtractLane { .. } => 0xfd1b,
            I32x4ReplaceLane { .. } => 0xfd1c,
            I64x2ExtractLane { .. } => 0xfd1d,
            I64x2ReplaceLane { .. } => 0xfd1e,
            F32x4ExtractLane { .. } => 0xfd1f,
            F32x4ReplaceLane { .. } => 0xfd20,
            F64x2ExtractLane { .. } => 0xfd21,
            F64x2ReplaceLane { .. } => 0xfd22,
            I8x16Eq => 0xfd23,
            I8x16Ne => 0xfd24,
            I8x16LtS => 0xfd25,
            I8x16LtU => 0xfd26,
            I8x16GtS => 0xfd27,
            I8x16GtU => 0xfd28,
            I8x16LeS => 0xfd29,
            I8x16LeU => 0xfd2a,
            I8x16GeS => 0xfd2b,
            I8x16GeU => 0xfd2c,
            I16x8Eq => 0xfd2d,
            I16x8Ne => 0xfd2e,
            I16x8LtS => 0xfd2f,
            I16x8LtU => 0xfd30,
            I16x8GtS => 0xfd31,
            I16x8GtU => 0xfd32,
            I16x8LeS => 0xfd33,
            I16x8LeU => 0xfd34,
            I16x8GeS => 0xfd35,
            I16x8GeU => 0xfd36,
            I32x4Eq => 0xfd37,
            I32x4Ne => 0xfd38,
            I32x4LtS => 0xfd39,
            I32x4LtU => 0xfd3a,
            I32x4GtS => 0xfd3b,
            I32x4GtU => 0xfd3c,
            I32x4LeS => 0xfd3d,
            I32x4LeU => 0xfd3e,
            I32x4GeS => 0xfd3f,
            I32x4GeU => 0xfd40,
            F32x4Eq => 0xfd41,
            F32x4Ne => 0xfd42,
            F32x4Lt => 0xfd43,
            F32x4Gt => 0xfd44,
            F32x4Le => 0xfd45,
            F32x4Ge => 0xfd46,
            F64x2Eq => 0xfd47,
            F64x2Ne => 0xfd48,
            F64x2Lt => 0xfd49,
            F64x2Gt => 0xfd4a,
            F64x2Le => 0xfd4b,
            F64x2Ge => 0xfd4c,
            V128Not => 0xfd4d,
            V128And => 0xfd4e,
            V128AndNot => 0xfd4f,
            V128Or => 0xfd50,
            V128Xor => 0xfd51,
            V128Bitselect => 0xfd52,
            V128AnyTrue => 0xfd53,
            V128Load8Lane { .. } => 0xfd54,
            V128Load16Lane { .. } => 0xfd55,
            V128Load32Lane { .. } => 0xfd56,
            V128Load64Lane { .. } => 0xfd57,
            V128Store8Lane { .. } => 0xfd58,
            V128Store16Lane { .. } => 0xfd59,
            V128Store32Lane { .. } => 0xfd5a,
            V128Store64Lane { .. } => 0xfd5b,
            V128Load32Zero { .. } => 0xfd5c,
            V128Load64Zero { .. } => 0xfd5d,
            F32x4DemoteF64x2Zero => 0xfd5e,
            F64x2PromoteLowF32x4 => 0xfd5f,
            I8x16Abs => 0xfd60,
            I8x16Neg => 0xfd61,
            I8x16Popcnt => 0xfd62,
            I8x16AllTrue => 0xfd63,
            I8x16Bitmask => 0xfd64,
            I8x16NarrowI16x8S => 0xfd65,
            I8x16NarrowI16x8U => 0xfd66,
            F32x4Ceil => 0xfd67,
            F32x4Floor => 0xfd68,
            F32x4Trunc => 0xfd69,
            F32x4Nearest => 0xfd6a,
            I8x16Shl => 0xfd6b,
            I8x16ShrS => 0xfd6c,
            I8x16ShrU => 0xfd6d,
            I8x16Add => 0xfd6e,
            I8x16AddSatS => 0xfd6f,
            I8x16AddSatU => 0xfd70,
            I8x16Sub => 0xfd71,
            I8x16SubSatS => 0xfd72,
            I8x16SubSatU => 0xfd73,
            F64x2Ceil => 0xfd74,
            F64x2Floor => 0xfd75,
            I8x16MinS => 0xfd76,
            I8x16MinU => 0xfd77,
            I8x16MaxS => 0xfd78,
            I8x16MaxU => 0xfd79,
            F64x2Trunc => 0xfd7a,
            I8x16RoundingAverageU => 0xfd7b,
            I16x8ExtAddPairwiseI8x16S => 0xfd7c,
            I16x8ExtAddPairwiseI8x16U => 0xfd7d,
            I32x4ExtAddPairwiseI16x8S => 0xfd7e,
            I32x4ExtAddPairwiseI16x8U => 0xfd7f,
            I16x8Abs => 0xfd80,
            I16x8Neg => 0xfd81,
            I16x8Q15MulrSatS => 0xfd82,
            I16x8AllTrue => 0xfd83,
            I16x8Bitmask => 0xfd84,
            I16x8NarrowI32x4S => 0xfd85,
            I16x8NarrowI32x4U => 0xfd86,
            I16x8ExtendLowI8x16S => 0xfd87,
            I16x8ExtendHighI8x16S => 0xfd88,
            I16x8ExtendLowI8x16U => 0xfd89,
            I16x8ExtendHighI8x16U => 0xfd8a,
            I16x8Shl => 0xfd8b,
            I16x8ShrS => 0xfd8c,
            I16x8ShrU => 0xfd8d,
            I16x8Add => 0xfd8e,
            I16x8AddSatS => 0xfd8f,
            I16x8AddSatU => 0xfd90,
            I16x8Sub => 0xfd91,
            I16x8SubSatS => 0xfd92,
            I16x8SubSatU => 0xfd93,
            F64x2Nearest => 0xfd94,
            I16x8Mul => 0xfd95,
            I16x8MinS => 0xfd96,
            I16x8MinU => 0xfd97,
            I16x8MaxS => 0xfd98,
            I16x8MaxU => 0xfd99,
            I16x8RoundingAverageU => 0xfd9b,
            I16x8ExtMulLowI8x16S => 0xfd9c,
            I16x8ExtMulHighI8x16S => 0xfd9d,
            I16x8ExtMulLowI8x16U => 0xfd9e,
            I16x8ExtMulHighI8x16U => 0xfd9f,
            I32x4Abs => 0xfda0,
            I8x16RelaxedSwizzle => 0xfda2,
            I32x4Neg => 0xfda1,
            I32x4AllTrue => 0xfda3,
            I32x4Bitmask => 0xfda4,
            I32x4RelaxedTruncSatF32x4S => 0xfda5,
            I32x4RelaxedTruncSatF32x4U => 0xfda6,
            I32x4ExtendLowI16x8S => 0xfda7,
            I32x4ExtendHighI16x8S => 0xfda8,
            I32x4ExtendLowI16x8U => 0xfda9,
            I32x4ExtendHighI16x8U => 0xfdaa,
            I32x4Shl => 0xfdab,
            I32x4ShrS => 0xfdac,
            I32x4ShrU => 0xfdad,
            I32x4Add => 0xfdae,
            F32x4Fma => 0xfdaf,
            F32x4Fms => 0xfdb0,
            I32x4Sub => 0xfdb1,
            I8x16LaneSelect => 0xfdb2,
            I16x8LaneSelect => 0xfdb3,
            F32x4RelaxedMin => 0xfdb4,
            I32x4Mul => 0xfdb5,
            I32x4MinS => 0xfdb6,
            I32x4MinU => 0xfdb7,
            I32x4MaxS => 0xfdb8,
            I32x4MaxU => 0xfdb9,
            I32x4DotI16x8S => 0xfdba,
            I32x4ExtMulLowI16x8S => 0xfdbc,
            I32x4ExtMulHighI16x8S => 0xfdbd,
            I32x4ExtMulLowI16x8U => 0xfdbe,
            I32x4ExtMulHighI16x8U => 0xfdbf,
            I64x2Abs => 0xfdc0,
            I64x2Neg => 0xfdc1,
            I64x2AllTrue => 0xfdc3,
            I64x2Bitmask => 0xfdc4,
            I32x4RelaxedTruncSatF64x2SZero => 0xfdc5,
            I32x4RelaxedTruncSatF64x2UZero => 0xfdc6,
            I64x2ExtendLowI32x4S => 0xfdc7,
            I64x2ExtendHighI32x4S => 0xfdc8,
            I64x2ExtendLowI32x4U => 0xfdc9,
            I64x2ExtendHighI32x4U => 0xfdca,
            I64x2Shl => 0xfdcb,
            I64x2ShrS => 0xfdcc,
            I64x2ShrU => 0xfdcd,
            I64x2Add => 0xfdce,
            F64x2Fma => 0xfdcf,
            F64x2Fms => 0xfdd0,
            I64x2Sub => 0xfdd1,
            I32x4LaneSelect => 0xfdd2,
            I64x2LaneSelect => 0xfdd3,
            F64x2RelaxedMin => 0xfdd4,
            I64x2Mul => 0xfdd5,
            I64x2Eq => 0xfdd6,
            I64x2Ne => 0xfdd7,
            I64x2LtS => 0xfdd8,
            I64x2GtS => 0xfdd9,
            I64x2LeS => 0xfdda,
            I64x2GeS => 0xfddb,
            I64x2ExtMulLowI32x4S => 0xfddc,
            I64x2ExtMulHighI32x4S => 0xfddd,
            I64x2ExtMulLowI32x4U => 0xfdde,
            I64x2ExtMulHighI32x4U => 0xfddf,
            F32x4Abs => 0xfde0,
            F32x4Neg => 0xfde1,
            F32x4RelaxedMax => 0xfde2,
            F32x4Sqrt => 0xfde3,
            F32x4Add => 0xfde4,
            F32x4Sub => 0xfde5,
            F32x4Mul => 0xfde6,
            F32x4Div => 0xfde7,
            F32x4Min => 0xfde8,
            F32x4Max => 0xfde9,
            F32x4PMin => 0xfdea,
            F32x4PMax => 0xfdeb,
            F64x2Abs => 0xfdec,
            F64x2Neg => 0xfded,
            F64x2RelaxedMax => 0xfdee,
            F64x2Sqrt => 0xfdef,
            F64x2Add => 0xfdf0,
            F64x2Sub => 0xfdf1,
            F64x2Mul => 0xfdf2,
            F64x2Div => 0xfdf3,
            F64x2Min => 0xfdf4,
            F64x2Max => 0xfdf5,
            F64x2PMin => 0xfdf6,
            F64x2PMax => 0xfdf7,
            I32x4TruncSatF32x4S => 0xfdf8,
            I32x4TruncSatF32x4U => 0xfdf9,
            F32x4ConvertI32x4S => 0xfdfa,
            F32x4ConvertI32x4U => 0xfdfb,
            I32x4TruncSatF64x2SZero => 0xfdfc,
            I32x4TruncSatF64x2UZero => 0xfdfd,
            F64x2ConvertLowI32x4S => 0xfdfe,
            F64x2ConvertLowI32x4U => 0xfdff,
            MemoryAtomicNotify { .. } => 0xfe00,
            MemoryAtomicWait32 { .. } => 0xfe01,
            MemoryAtomicWait64 { .. } => 0xfe02,
            AtomicFence { .. } => 0xfe03,
            I32AtomicLoad { .. } => 0xfe10,
            I64AtomicLoad { .. } => 0xfe11,
            I32AtomicLoad8U { .. } => 0xfe12,
            I32AtomicLoad16U { .. } => 0xfe13,
            I64AtomicLoad8U { .. } => 0xfe14,
            I64AtomicLoad16U { .. } => 0xfe15,
            I64AtomicLoad32U { .. } => 0xfe16,
            I32AtomicStore { .. } => 0xfe17,
            I64AtomicStore { .. } => 0xfe18,
            I32AtomicStore8 { .. } => 0xfe19,
            I32AtomicStore16 { .. } => 0xfe1a,
            I64AtomicStore8 { .. } => 0xfe1b,
            I64AtomicStore16 { .. } => 0xfe1c,
            I64AtomicStore32 { .. } => 0xfe1d,
            I32AtomicRmwAdd { .. } => 0xfe1e,
            I64AtomicRmwAdd { .. } => 0xfe1f,
            I32AtomicRmw8AddU { .. } => 0xfe20,
            I32AtomicRmw16AddU { .. } => 0xfe21,
            I64AtomicRmw8AddU { .. } => 0xfe22,
            I64AtomicRmw16AddU { .. } => 0xfe23,
            I64AtomicRmw32AddU { .. } => 0xfe24,
            I32AtomicRmwSub { .. } => 0xfe25,
            I64AtomicRmwSub { .. } => 0xfe26,
            I32AtomicRmw8SubU { .. } => 0xfe27,
            I32AtomicRmw16SubU { .. } => 0xfe28,
            I64AtomicRmw8SubU { .. } => 0xfe29,
            I64AtomicRmw16SubU { .. } => 0xfe2a,
            I64AtomicRmw32SubU { .. } => 0xfe2b,
            I32AtomicRmwAnd { .. } => 0xfe2c,
            I64AtomicRmwAnd { .. } => 0xfe2d,
            I32AtomicRmw8AndU { .. } => 0xfe2e,
            I32AtomicRmw16AndU { .. } => 0xfe2f,
            I64AtomicRmw8AndU { .. } => 0xfe30,
            I64AtomicRmw16AndU { .. } => 0xfe31,
            I64AtomicRmw32AndU { .. } => 0xfe32,
            I32AtomicRmwOr { .. } => 0xfe33,
            I64AtomicRmwOr { .. } => 0xfe34,
            I32AtomicRmw8OrU { .. } => 0xfe35,
            I32AtomicRmw16OrU { .. } => 0xfe36,
            I64AtomicRmw8OrU { .. } => 0xfe37,
            I64AtomicRmw16OrU { .. } => 0xfe38,
            I64AtomicRmw32OrU { .. } => 0xfe39,
            I32AtomicRmwXor { .. } => 0xfe3a,
            I64AtomicRmwXor { .. } => 0xfe3b,
            I32AtomicRmw8XorU { .. } => 0xfe3c,
            I32AtomicRmw16XorU { .. } => 0xfe3d,
            I64AtomicRmw8XorU { .. } => 0xfe3e,
            I64AtomicRmw16XorU { .. } => 0xfe3f,
            I64AtomicRmw32XorU { .. } => 0xfe40,
            I32AtomicRmwXchg { .. } => 0xfe41,
            I64AtomicRmwXchg { .. } => 0xfe42,
            I32AtomicRmw8XchgU { .. } => 0xfe43,
            I32AtomicRmw16XchgU { .. } => 0xfe44,
            I64AtomicRmw8XchgU { .. } => 0xfe45,
            I64AtomicRmw16XchgU { .. } => 0xfe46,
            I64AtomicRmw32XchgU { .. } => 0xfe47,
            I32AtomicRmwCmpxchg { .. } => 0xfe48,
            I64AtomicRmwCmpxchg { .. } => 0xfe49,
            I32AtomicRmw8CmpxchgU { .. } => 0xfe4a,
            I32AtomicRmw16CmpxchgU { .. } => 0xfe4b,
            I64AtomicRmw8CmpxchgU { .. } => 0xfe4c,
            I64AtomicRmw16CmpxchgU { .. } => 0xfe4d,
            I64AtomicRmw32CmpxchgU { .. } => 0xfe4e,
        })
    }
}

impl OperatorCode {
    pub fn seq(&self) -> usize {
        match self.0 {
            0x00 => 0,
            0x01 => 1,
            0x02 => 2,
            0x03 => 3,
            0x04 => 4,
            0x05 => 5,
            0x06 => 6,
            0x07 => 7,
            0x08 => 8,
            0x09 => 9,
            0x0b => 10,
            0x0c => 11,
            0x0d => 12,
            0x0e => 13,
            0x0f => 14,
            0x10 => 15,
            0x11 => 16,
            0x12 => 17,
            0x13 => 18,
            0x18 => 19,
            0x19 => 20,
            0x1a => 21,
            0x1b => 22,
            0x1c => 23,
            0x20 => 24,
            0x21 => 25,
            0x22 => 26,
            0x23 => 27,
            0x24 => 28,
            0x25 => 29,
            0x26 => 30,
            0x28 => 31,
            0x29 => 32,
            0x2a => 33,
            0x2b => 34,
            0x2c => 35,
            0x2d => 36,
            0x2e => 37,
            0x2f => 38,
            0x30 => 39,
            0x31 => 40,
            0x32 => 41,
            0x33 => 42,
            0x34 => 43,
            0x35 => 44,
            0x36 => 45,
            0x37 => 46,
            0x38 => 47,
            0x39 => 48,
            0x3a => 49,
            0x3b => 50,
            0x3c => 51,
            0x3d => 52,
            0x3e => 53,
            0x3f => 54,
            0x40 => 55,
            0x41 => 56,
            0x42 => 57,
            0x43 => 58,
            0x44 => 59,
            0x45 => 60,
            0x46 => 61,
            0x47 => 62,
            0x48 => 63,
            0x49 => 64,
            0x4a => 65,
            0x4b => 66,
            0x4c => 67,
            0x4d => 68,
            0x4e => 69,
            0x4f => 70,
            0x50 => 71,
            0x51 => 72,
            0x52 => 73,
            0x53 => 74,
            0x54 => 75,
            0x55 => 76,
            0x56 => 77,
            0x57 => 78,
            0x58 => 79,
            0x59 => 80,
            0x5a => 81,
            0x5b => 82,
            0x5c => 83,
            0x5d => 84,
            0x5e => 85,
            0x5f => 86,
            0x60 => 87,
            0x61 => 88,
            0x62 => 89,
            0x63 => 90,
            0x64 => 91,
            0x65 => 92,
            0x66 => 93,
            0x67 => 94,
            0x68 => 95,
            0x69 => 96,
            0x6a => 97,
            0x6b => 98,
            0x6c => 99,
            0x6d => 100,
            0x6e => 101,
            0x6f => 102,
            0x70 => 103,
            0x71 => 104,
            0x72 => 105,
            0x73 => 106,
            0x74 => 107,
            0x75 => 108,
            0x76 => 109,
            0x77 => 110,
            0x78 => 111,
            0x79 => 112,
            0x7a => 113,
            0x7b => 114,
            0x7c => 115,
            0x7d => 116,
            0x7e => 117,
            0x7f => 118,
            0x80 => 119,
            0x81 => 120,
            0x82 => 121,
            0x83 => 122,
            0x84 => 123,
            0x85 => 124,
            0x86 => 125,
            0x87 => 126,
            0x88 => 127,
            0x89 => 128,
            0x8a => 129,
            0x8b => 130,
            0x8c => 131,
            0x8d => 132,
            0x8e => 133,
            0x8f => 134,
            0x90 => 135,
            0x91 => 136,
            0x92 => 137,
            0x93 => 138,
            0x94 => 139,
            0x95 => 140,
            0x96 => 141,
            0x97 => 142,
            0x98 => 143,
            0x99 => 144,
            0x9a => 145,
            0x9b => 146,
            0x9c => 147,
            0x9d => 148,
            0x9e => 149,
            0x9f => 150,
            0xa0 => 151,
            0xa1 => 152,
            0xa2 => 153,
            0xa3 => 154,
            0xa4 => 155,
            0xa5 => 156,
            0xa6 => 157,
            0xa7 => 158,
            0xa8 => 159,
            0xa9 => 160,
            0xaa => 161,
            0xab => 162,
            0xac => 163,
            0xad => 164,
            0xae => 165,
            0xaf => 166,
            0xb0 => 167,
            0xb1 => 168,
            0xb2 => 169,
            0xb3 => 170,
            0xb4 => 171,
            0xb5 => 172,
            0xb6 => 173,
            0xb7 => 174,
            0xb8 => 175,
            0xb9 => 176,
            0xba => 177,
            0xbb => 178,
            0xbc => 179,
            0xbd => 180,
            0xbe => 181,
            0xbf => 182,
            0xc0 => 183,
            0xc1 => 184,
            0xc2 => 185,
            0xc3 => 186,
            0xc4 => 187,
            0xd0 => 188,
            0xd1 => 189,
            0xd2 => 190,
            0xfc00 => 191,
            0xfc01 => 192,
            0xfc02 => 193,
            0xfc03 => 194,
            0xfc04 => 195,
            0xfc05 => 196,
            0xfc06 => 197,
            0xfc07 => 198,
            0xfc08 => 199,
            0xfc09 => 200,
            0xfc0a => 201,
            0xfc0b => 202,
            0xfc0c => 203,
            0xfc0d => 204,
            0xfc0e => 205,
            0xfc0f => 206,
            0xfc10 => 207,
            0xfc11 => 208,
            0xfd00 => 209,
            0xfd01 => 210,
            0xfd02 => 211,
            0xfd03 => 212,
            0xfd04 => 213,
            0xfd05 => 214,
            0xfd06 => 215,
            0xfd07 => 216,
            0xfd08 => 217,
            0xfd09 => 218,
            0xfd0a => 219,
            0xfd0b => 220,
            0xfd0c => 221,
            0xfd0d => 222,
            0xfd0e => 223,
            0xfd0f => 224,
            0xfd10 => 225,
            0xfd11 => 226,
            0xfd12 => 227,
            0xfd13 => 228,
            0xfd14 => 229,
            0xfd15 => 230,
            0xfd16 => 231,
            0xfd17 => 232,
            0xfd18 => 233,
            0xfd19 => 234,
            0xfd1a => 235,
            0xfd1b => 236,
            0xfd1c => 237,
            0xfd1d => 238,
            0xfd1e => 239,
            0xfd1f => 240,
            0xfd20 => 241,
            0xfd21 => 242,
            0xfd22 => 243,
            0xfd23 => 244,
            0xfd24 => 245,
            0xfd25 => 246,
            0xfd26 => 247,
            0xfd27 => 248,
            0xfd28 => 249,
            0xfd29 => 250,
            0xfd2a => 251,
            0xfd2b => 252,
            0xfd2c => 253,
            0xfd2d => 254,
            0xfd2e => 255,
            0xfd2f => 256,
            0xfd30 => 257,
            0xfd31 => 258,
            0xfd32 => 259,
            0xfd33 => 260,
            0xfd34 => 261,
            0xfd35 => 262,
            0xfd36 => 263,
            0xfd37 => 264,
            0xfd38 => 265,
            0xfd39 => 266,
            0xfd3a => 267,
            0xfd3b => 268,
            0xfd3c => 269,
            0xfd3d => 270,
            0xfd3e => 271,
            0xfd3f => 272,
            0xfd40 => 273,
            0xfd41 => 274,
            0xfd42 => 275,
            0xfd43 => 276,
            0xfd44 => 277,
            0xfd45 => 278,
            0xfd46 => 279,
            0xfd47 => 280,
            0xfd48 => 281,
            0xfd49 => 282,
            0xfd4a => 283,
            0xfd4b => 284,
            0xfd4c => 285,
            0xfd4d => 286,
            0xfd4e => 287,
            0xfd4f => 288,
            0xfd50 => 289,
            0xfd51 => 290,
            0xfd52 => 291,
            0xfd53 => 292,
            0xfd54 => 293,
            0xfd55 => 294,
            0xfd56 => 295,
            0xfd57 => 296,
            0xfd58 => 297,
            0xfd59 => 298,
            0xfd5a => 299,
            0xfd5b => 300,
            0xfd5c => 301,
            0xfd5d => 302,
            0xfd5e => 303,
            0xfd5f => 304,
            0xfd60 => 305,
            0xfd61 => 306,
            0xfd62 => 307,
            0xfd63 => 308,
            0xfd64 => 309,
            0xfd65 => 310,
            0xfd66 => 311,
            0xfd67 => 312,
            0xfd68 => 313,
            0xfd69 => 314,
            0xfd6a => 315,
            0xfd6b => 316,
            0xfd6c => 317,
            0xfd6d => 318,
            0xfd6e => 319,
            0xfd6f => 320,
            0xfd70 => 321,
            0xfd71 => 322,
            0xfd72 => 323,
            0xfd73 => 324,
            0xfd74 => 325,
            0xfd75 => 326,
            0xfd76 => 327,
            0xfd77 => 328,
            0xfd78 => 329,
            0xfd79 => 330,
            0xfd7a => 331,
            0xfd7b => 332,
            0xfd7c => 333,
            0xfd7d => 334,
            0xfd7e => 335,
            0xfd7f => 336,
            0xfd80 => 337,
            0xfd81 => 338,
            0xfd82 => 339,
            0xfd83 => 340,
            0xfd84 => 341,
            0xfd85 => 342,
            0xfd86 => 343,
            0xfd87 => 344,
            0xfd88 => 345,
            0xfd89 => 346,
            0xfd8a => 347,
            0xfd8b => 348,
            0xfd8c => 349,
            0xfd8d => 350,
            0xfd8e => 351,
            0xfd8f => 352,
            0xfd90 => 353,
            0xfd91 => 354,
            0xfd92 => 355,
            0xfd93 => 356,
            0xfd94 => 357,
            0xfd95 => 358,
            0xfd96 => 359,
            0xfd97 => 360,
            0xfd98 => 361,
            0xfd99 => 362,
            0xfd9b => 363,
            0xfd9c => 364,
            0xfd9d => 365,
            0xfd9e => 366,
            0xfd9f => 367,
            0xfda0 => 368,
            0xfda2 => 369,
            0xfda1 => 370,
            0xfda3 => 371,
            0xfda4 => 372,
            0xfda5 => 373,
            0xfda6 => 374,
            0xfda7 => 375,
            0xfda8 => 376,
            0xfda9 => 377,
            0xfdaa => 378,
            0xfdab => 379,
            0xfdac => 380,
            0xfdad => 381,
            0xfdae => 382,
            0xfdaf => 383,
            0xfdb0 => 384,
            0xfdb1 => 385,
            0xfdb2 => 386,
            0xfdb3 => 387,
            0xfdb4 => 388,
            0xfdb5 => 389,
            0xfdb6 => 390,
            0xfdb7 => 391,
            0xfdb8 => 392,
            0xfdb9 => 393,
            0xfdba => 394,
            0xfdbc => 395,
            0xfdbd => 396,
            0xfdbe => 397,
            0xfdbf => 398,
            0xfdc0 => 399,
            0xfdc1 => 400,
            0xfdc3 => 401,
            0xfdc4 => 402,
            0xfdc5 => 403,
            0xfdc6 => 404,
            0xfdc7 => 405,
            0xfdc8 => 406,
            0xfdc9 => 407,
            0xfdca => 408,
            0xfdcb => 409,
            0xfdcc => 410,
            0xfdcd => 411,
            0xfdce => 412,
            0xfdcf => 413,
            0xfdd0 => 414,
            0xfdd1 => 415,
            0xfdd2 => 416,
            0xfdd3 => 417,
            0xfdd4 => 418,
            0xfdd5 => 419,
            0xfdd6 => 420,
            0xfdd7 => 421,
            0xfdd8 => 422,
            0xfdd9 => 423,
            0xfdda => 424,
            0xfddb => 425,
            0xfddc => 426,
            0xfddd => 427,
            0xfdde => 428,
            0xfddf => 429,
            0xfde0 => 430,
            0xfde1 => 431,
            0xfde2 => 432,
            0xfde3 => 433,
            0xfde4 => 434,
            0xfde5 => 435,
            0xfde6 => 436,
            0xfde7 => 437,
            0xfde8 => 438,
            0xfde9 => 439,
            0xfdea => 440,
            0xfdeb => 441,
            0xfdec => 442,
            0xfded => 443,
            0xfdee => 444,
            0xfdef => 445,
            0xfdf0 => 446,
            0xfdf1 => 447,
            0xfdf2 => 448,
            0xfdf3 => 449,
            0xfdf4 => 450,
            0xfdf5 => 451,
            0xfdf6 => 452,
            0xfdf7 => 453,
            0xfdf8 => 454,
            0xfdf9 => 455,
            0xfdfa => 456,
            0xfdfb => 457,
            0xfdfc => 458,
            0xfdfd => 459,
            0xfdfe => 460,
            0xfdff => 461,
            0xfe00 => 462,
            0xfe01 => 463,
            0xfe02 => 464,
            0xfe03 => 465,
            0xfe10 => 466,
            0xfe11 => 467,
            0xfe12 => 468,
            0xfe13 => 469,
            0xfe14 => 470,
            0xfe15 => 471,
            0xfe16 => 472,
            0xfe17 => 473,
            0xfe18 => 474,
            0xfe19 => 475,
            0xfe1a => 476,
            0xfe1b => 477,
            0xfe1c => 478,
            0xfe1d => 479,
            0xfe1e => 480,
            0xfe1f => 481,
            0xfe20 => 482,
            0xfe21 => 483,
            0xfe22 => 484,
            0xfe23 => 485,
            0xfe24 => 486,
            0xfe25 => 487,
            0xfe26 => 488,
            0xfe27 => 489,
            0xfe28 => 490,
            0xfe29 => 491,
            0xfe2a => 492,
            0xfe2b => 493,
            0xfe2c => 494,
            0xfe2d => 495,
            0xfe2e => 496,
            0xfe2f => 497,
            0xfe30 => 498,
            0xfe31 => 499,
            0xfe32 => 500,
            0xfe33 => 501,
            0xfe34 => 502,
            0xfe35 => 503,
            0xfe36 => 504,
            0xfe37 => 505,
            0xfe38 => 506,
            0xfe39 => 507,
            0xfe3a => 508,
            0xfe3b => 509,
            0xfe3c => 510,
            0xfe3d => 511,
            0xfe3e => 512,
            0xfe3f => 513,
            0xfe40 => 514,
            0xfe41 => 515,
            0xfe42 => 516,
            0xfe43 => 517,
            0xfe44 => 518,
            0xfe45 => 519,
            0xfe46 => 520,
            0xfe47 => 521,
            0xfe48 => 522,
            0xfe49 => 523,
            0xfe4a => 524,
            0xfe4b => 525,
            0xfe4c => 526,
            0xfe4d => 527,
            0xfe4e => 528,
            x => panic!("unknown op {x}"),
        }
    }

    pub fn from_seq(code: usize) -> Self {
        OperatorCode(match code {
            0 => 0x00,
            1 => 0x01,
            2 => 0x02,
            3 => 0x03,
            4 => 0x04,
            5 => 0x05,
            6 => 0x06,
            7 => 0x07,
            8 => 0x08,
            9 => 0x09,
            10 => 0x0b,
            11 => 0x0c,
            12 => 0x0d,
            13 => 0x0e,
            14 => 0x0f,
            15 => 0x10,
            16 => 0x11,
            17 => 0x12,
            18 => 0x13,
            19 => 0x18,
            20 => 0x19,
            21 => 0x1a,
            22 => 0x1b,
            23 => 0x1c,
            24 => 0x20,
            25 => 0x21,
            26 => 0x22,
            27 => 0x23,
            28 => 0x24,
            29 => 0x25,
            30 => 0x26,
            31 => 0x28,
            32 => 0x29,
            33 => 0x2a,
            34 => 0x2b,
            35 => 0x2c,
            36 => 0x2d,
            37 => 0x2e,
            38 => 0x2f,
            39 => 0x30,
            40 => 0x31,
            41 => 0x32,
            42 => 0x33,
            43 => 0x34,
            44 => 0x35,
            45 => 0x36,
            46 => 0x37,
            47 => 0x38,
            48 => 0x39,
            49 => 0x3a,
            50 => 0x3b,
            51 => 0x3c,
            52 => 0x3d,
            53 => 0x3e,
            54 => 0x3f,
            55 => 0x40,
            56 => 0x41,
            57 => 0x42,
            58 => 0x43,
            59 => 0x44,
            60 => 0x45,
            61 => 0x46,
            62 => 0x47,
            63 => 0x48,
            64 => 0x49,
            65 => 0x4a,
            66 => 0x4b,
            67 => 0x4c,
            68 => 0x4d,
            69 => 0x4e,
            70 => 0x4f,
            71 => 0x50,
            72 => 0x51,
            73 => 0x52,
            74 => 0x53,
            75 => 0x54,
            76 => 0x55,
            77 => 0x56,
            78 => 0x57,
            79 => 0x58,
            80 => 0x59,
            81 => 0x5a,
            82 => 0x5b,
            83 => 0x5c,
            84 => 0x5d,
            85 => 0x5e,
            86 => 0x5f,
            87 => 0x60,
            88 => 0x61,
            89 => 0x62,
            90 => 0x63,
            91 => 0x64,
            92 => 0x65,
            93 => 0x66,
            94 => 0x67,
            95 => 0x68,
            96 => 0x69,
            97 => 0x6a,
            98 => 0x6b,
            99 => 0x6c,
            100 => 0x6d,
            101 => 0x6e,
            102 => 0x6f,
            103 => 0x70,
            104 => 0x71,
            105 => 0x72,
            106 => 0x73,
            107 => 0x74,
            108 => 0x75,
            109 => 0x76,
            110 => 0x77,
            111 => 0x78,
            112 => 0x79,
            113 => 0x7a,
            114 => 0x7b,
            115 => 0x7c,
            116 => 0x7d,
            117 => 0x7e,
            118 => 0x7f,
            119 => 0x80,
            120 => 0x81,
            121 => 0x82,
            122 => 0x83,
            123 => 0x84,
            124 => 0x85,
            125 => 0x86,
            126 => 0x87,
            127 => 0x88,
            128 => 0x89,
            129 => 0x8a,
            130 => 0x8b,
            131 => 0x8c,
            132 => 0x8d,
            133 => 0x8e,
            134 => 0x8f,
            135 => 0x90,
            136 => 0x91,
            137 => 0x92,
            138 => 0x93,
            139 => 0x94,
            140 => 0x95,
            141 => 0x96,
            142 => 0x97,
            143 => 0x98,
            144 => 0x99,
            145 => 0x9a,
            146 => 0x9b,
            147 => 0x9c,
            148 => 0x9d,
            149 => 0x9e,
            150 => 0x9f,
            151 => 0xa0,
            152 => 0xa1,
            153 => 0xa2,
            154 => 0xa3,
            155 => 0xa4,
            156 => 0xa5,
            157 => 0xa6,
            158 => 0xa7,
            159 => 0xa8,
            160 => 0xa9,
            161 => 0xaa,
            162 => 0xab,
            163 => 0xac,
            164 => 0xad,
            165 => 0xae,
            166 => 0xaf,
            167 => 0xb0,
            168 => 0xb1,
            169 => 0xb2,
            170 => 0xb3,
            171 => 0xb4,
            172 => 0xb5,
            173 => 0xb6,
            174 => 0xb7,
            175 => 0xb8,
            176 => 0xb9,
            177 => 0xba,
            178 => 0xbb,
            179 => 0xbc,
            180 => 0xbd,
            181 => 0xbe,
            182 => 0xbf,
            183 => 0xc0,
            184 => 0xc1,
            185 => 0xc2,
            186 => 0xc3,
            187 => 0xc4,
            188 => 0xd0,
            189 => 0xd1,
            190 => 0xd2,
            191 => 0xfc00,
            192 => 0xfc01,
            193 => 0xfc02,
            194 => 0xfc03,
            195 => 0xfc04,
            196 => 0xfc05,
            197 => 0xfc06,
            198 => 0xfc07,
            199 => 0xfc08,
            200 => 0xfc09,
            201 => 0xfc0a,
            202 => 0xfc0b,
            203 => 0xfc0c,
            204 => 0xfc0d,
            205 => 0xfc0e,
            206 => 0xfc0f,
            207 => 0xfc10,
            208 => 0xfc11,
            209 => 0xfd00,
            210 => 0xfd01,
            211 => 0xfd02,
            212 => 0xfd03,
            213 => 0xfd04,
            214 => 0xfd05,
            215 => 0xfd06,
            216 => 0xfd07,
            217 => 0xfd08,
            218 => 0xfd09,
            219 => 0xfd0a,
            220 => 0xfd0b,
            221 => 0xfd0c,
            222 => 0xfd0d,
            223 => 0xfd0e,
            224 => 0xfd0f,
            225 => 0xfd10,
            226 => 0xfd11,
            227 => 0xfd12,
            228 => 0xfd13,
            229 => 0xfd14,
            230 => 0xfd15,
            231 => 0xfd16,
            232 => 0xfd17,
            233 => 0xfd18,
            234 => 0xfd19,
            235 => 0xfd1a,
            236 => 0xfd1b,
            237 => 0xfd1c,
            238 => 0xfd1d,
            239 => 0xfd1e,
            240 => 0xfd1f,
            241 => 0xfd20,
            242 => 0xfd21,
            243 => 0xfd22,
            244 => 0xfd23,
            245 => 0xfd24,
            246 => 0xfd25,
            247 => 0xfd26,
            248 => 0xfd27,
            249 => 0xfd28,
            250 => 0xfd29,
            251 => 0xfd2a,
            252 => 0xfd2b,
            253 => 0xfd2c,
            254 => 0xfd2d,
            255 => 0xfd2e,
            256 => 0xfd2f,
            257 => 0xfd30,
            258 => 0xfd31,
            259 => 0xfd32,
            260 => 0xfd33,
            261 => 0xfd34,
            262 => 0xfd35,
            263 => 0xfd36,
            264 => 0xfd37,
            265 => 0xfd38,
            266 => 0xfd39,
            267 => 0xfd3a,
            268 => 0xfd3b,
            269 => 0xfd3c,
            270 => 0xfd3d,
            271 => 0xfd3e,
            272 => 0xfd3f,
            273 => 0xfd40,
            274 => 0xfd41,
            275 => 0xfd42,
            276 => 0xfd43,
            277 => 0xfd44,
            278 => 0xfd45,
            279 => 0xfd46,
            280 => 0xfd47,
            281 => 0xfd48,
            282 => 0xfd49,
            283 => 0xfd4a,
            284 => 0xfd4b,
            285 => 0xfd4c,
            286 => 0xfd4d,
            287 => 0xfd4e,
            288 => 0xfd4f,
            289 => 0xfd50,
            290 => 0xfd51,
            291 => 0xfd52,
            292 => 0xfd53,
            293 => 0xfd54,
            294 => 0xfd55,
            295 => 0xfd56,
            296 => 0xfd57,
            297 => 0xfd58,
            298 => 0xfd59,
            299 => 0xfd5a,
            300 => 0xfd5b,
            301 => 0xfd5c,
            302 => 0xfd5d,
            303 => 0xfd5e,
            304 => 0xfd5f,
            305 => 0xfd60,
            306 => 0xfd61,
            307 => 0xfd62,
            308 => 0xfd63,
            309 => 0xfd64,
            310 => 0xfd65,
            311 => 0xfd66,
            312 => 0xfd67,
            313 => 0xfd68,
            314 => 0xfd69,
            315 => 0xfd6a,
            316 => 0xfd6b,
            317 => 0xfd6c,
            318 => 0xfd6d,
            319 => 0xfd6e,
            320 => 0xfd6f,
            321 => 0xfd70,
            322 => 0xfd71,
            323 => 0xfd72,
            324 => 0xfd73,
            325 => 0xfd74,
            326 => 0xfd75,
            327 => 0xfd76,
            328 => 0xfd77,
            329 => 0xfd78,
            330 => 0xfd79,
            331 => 0xfd7a,
            332 => 0xfd7b,
            333 => 0xfd7c,
            334 => 0xfd7d,
            335 => 0xfd7e,
            336 => 0xfd7f,
            337 => 0xfd80,
            338 => 0xfd81,
            339 => 0xfd82,
            340 => 0xfd83,
            341 => 0xfd84,
            342 => 0xfd85,
            343 => 0xfd86,
            344 => 0xfd87,
            345 => 0xfd88,
            346 => 0xfd89,
            347 => 0xfd8a,
            348 => 0xfd8b,
            349 => 0xfd8c,
            350 => 0xfd8d,
            351 => 0xfd8e,
            352 => 0xfd8f,
            353 => 0xfd90,
            354 => 0xfd91,
            355 => 0xfd92,
            356 => 0xfd93,
            357 => 0xfd94,
            358 => 0xfd95,
            359 => 0xfd96,
            360 => 0xfd97,
            361 => 0xfd98,
            362 => 0xfd99,
            363 => 0xfd9b,
            364 => 0xfd9c,
            365 => 0xfd9d,
            366 => 0xfd9e,
            367 => 0xfd9f,
            368 => 0xfda0,
            369 => 0xfda2,
            370 => 0xfda1,
            371 => 0xfda3,
            372 => 0xfda4,
            373 => 0xfda5,
            374 => 0xfda6,
            375 => 0xfda7,
            376 => 0xfda8,
            377 => 0xfda9,
            378 => 0xfdaa,
            379 => 0xfdab,
            380 => 0xfdac,
            381 => 0xfdad,
            382 => 0xfdae,
            383 => 0xfdaf,
            384 => 0xfdb0,
            385 => 0xfdb1,
            386 => 0xfdb2,
            387 => 0xfdb3,
            388 => 0xfdb4,
            389 => 0xfdb5,
            390 => 0xfdb6,
            391 => 0xfdb7,
            392 => 0xfdb8,
            393 => 0xfdb9,
            394 => 0xfdba,
            395 => 0xfdbc,
            396 => 0xfdbd,
            397 => 0xfdbe,
            398 => 0xfdbf,
            399 => 0xfdc0,
            400 => 0xfdc1,
            401 => 0xfdc3,
            402 => 0xfdc4,
            403 => 0xfdc5,
            404 => 0xfdc6,
            405 => 0xfdc7,
            406 => 0xfdc8,
            407 => 0xfdc9,
            408 => 0xfdca,
            409 => 0xfdcb,
            410 => 0xfdcc,
            411 => 0xfdcd,
            412 => 0xfdce,
            413 => 0xfdcf,
            414 => 0xfdd0,
            415 => 0xfdd1,
            416 => 0xfdd2,
            417 => 0xfdd3,
            418 => 0xfdd4,
            419 => 0xfdd5,
            420 => 0xfdd6,
            421 => 0xfdd7,
            422 => 0xfdd8,
            423 => 0xfdd9,
            424 => 0xfdda,
            425 => 0xfddb,
            426 => 0xfddc,
            427 => 0xfddd,
            428 => 0xfdde,
            429 => 0xfddf,
            430 => 0xfde0,
            431 => 0xfde1,
            432 => 0xfde2,
            433 => 0xfde3,
            434 => 0xfde4,
            435 => 0xfde5,
            436 => 0xfde6,
            437 => 0xfde7,
            438 => 0xfde8,
            439 => 0xfde9,
            440 => 0xfdea,
            441 => 0xfdeb,
            442 => 0xfdec,
            443 => 0xfded,
            444 => 0xfdee,
            445 => 0xfdef,
            446 => 0xfdf0,
            447 => 0xfdf1,
            448 => 0xfdf2,
            449 => 0xfdf3,
            450 => 0xfdf4,
            451 => 0xfdf5,
            452 => 0xfdf6,
            453 => 0xfdf7,
            454 => 0xfdf8,
            455 => 0xfdf9,
            456 => 0xfdfa,
            457 => 0xfdfb,
            458 => 0xfdfc,
            459 => 0xfdfd,
            460 => 0xfdfe,
            461 => 0xfdff,
            462 => 0xfe00,
            463 => 0xfe01,
            464 => 0xfe02,
            465 => 0xfe03,
            466 => 0xfe10,
            467 => 0xfe11,
            468 => 0xfe12,
            469 => 0xfe13,
            470 => 0xfe14,
            471 => 0xfe15,
            472 => 0xfe16,
            473 => 0xfe17,
            474 => 0xfe18,
            475 => 0xfe19,
            476 => 0xfe1a,
            477 => 0xfe1b,
            478 => 0xfe1c,
            479 => 0xfe1d,
            480 => 0xfe1e,
            481 => 0xfe1f,
            482 => 0xfe20,
            483 => 0xfe21,
            484 => 0xfe22,
            485 => 0xfe23,
            486 => 0xfe24,
            487 => 0xfe25,
            488 => 0xfe26,
            489 => 0xfe27,
            490 => 0xfe28,
            491 => 0xfe29,
            492 => 0xfe2a,
            493 => 0xfe2b,
            494 => 0xfe2c,
            495 => 0xfe2d,
            496 => 0xfe2e,
            497 => 0xfe2f,
            498 => 0xfe30,
            499 => 0xfe31,
            500 => 0xfe32,
            501 => 0xfe33,
            502 => 0xfe34,
            503 => 0xfe35,
            504 => 0xfe36,
            505 => 0xfe37,
            506 => 0xfe38,
            507 => 0xfe39,
            508 => 0xfe3a,
            509 => 0xfe3b,
            510 => 0xfe3c,
            511 => 0xfe3d,
            512 => 0xfe3e,
            513 => 0xfe3f,
            514 => 0xfe40,
            515 => 0xfe41,
            516 => 0xfe42,
            517 => 0xfe43,
            518 => 0xfe44,
            519 => 0xfe45,
            520 => 0xfe46,
            521 => 0xfe47,
            522 => 0xfe48,
            523 => 0xfe49,
            524 => 0xfe4a,
            525 => 0xfe4b,
            526 => 0xfe4c,
            527 => 0xfe4d,
            528 => 0xfe4e,
            x => panic!("unknown op {x}"),
        })
    }
}

pub trait OperatorInfo {
    fn ends_basic_block(&self) -> bool;
    fn code(&self) -> OperatorCode;
}

impl OperatorInfo for Operator<'_> {
    fn ends_basic_block(&self) -> bool {
        use Operator::*;

        macro_rules! dot {
            ($first:ident $(,$opcode:ident)*) => {
                $first { .. } $(| $opcode { .. })*
            };
        }

        matches!(
            self,
            End | Else | Return | dot!(Loop, Br, BrTable, BrIf, If, Call, CallIndirect)
        )
    }

    fn code(&self) -> OperatorCode {
        self.into()
    }
}
